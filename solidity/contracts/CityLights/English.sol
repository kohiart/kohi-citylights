// SPDX-License-Identifier: UNLICENSED
/* Copyright (c) 2021 eepmon. All rights reserved. */

pragma solidity ^0.8.13;

import "./Errors.sol";
import "./Element.sol";

library English {
    function getWordList(Element element)
        external
        pure
        returns (string[] memory)
    {
        if (element == Element.Fire) {
            string[] memory words = new string[](38);
            words[0] = unicode"Rise";
            words[1] = unicode"from";
            words[2] = unicode"fiery";
            words[3] = unicode"ashes";
            words[4] = unicode"Reborn";
            words[5] = unicode"with";
            words[6] = unicode"burning";
            words[7] = unicode"desires";
            words[8] = unicode"Ever";
            words[9] = unicode"silently";
            words[10] = unicode"illuminating";
            words[11] = unicode"Blaze";
            words[12] = unicode"onward";
            words[13] = unicode"Without";
            words[14] = unicode"hesitation";
            words[15] = unicode"/";
            words[16] = unicode"朝♥♥";
            words[17] = unicode"Ʒ";
            words[18] = unicode"▓▓▓";
            words[19] = unicode"▓▓";
            words[20] = unicode"=▓";
            words[21] = unicode"__";
            words[22] = unicode"_▓";
            words[23] = unicode"=▓";
            words[24] = unicode"▓▓";
            words[25] = unicode"▓▓";
            words[26] = unicode"██";
            words[27] = unicode"▀▀▀▀";
            words[28] = unicode"▀▀▀";
            words[29] = unicode"▀▀▀▀";
            words[30] = unicode"▀▀───▀▀57";
            words[31] = unicode"国づ♥♥♥♥";
            words[32] = unicode"レソヨ判断ク";
            words[33] = unicode"の";
            words[34] = unicode"場";
            words[35] = unicode"サ強";
            words[36] = unicode"依仰巣";
            words[37] = unicode"ぞル。";
            return (words);
        } else if (element == Element.Water) {
            string[] memory words = new string[](44);
            words[0] = unicode"Momentum";
            words[1] = unicode"is";
            words[2] = unicode"key";
            words[3] = unicode"Perpetually";
            words[4] = unicode"flowing";
            words[5] = unicode"infinitely";
            words[6] = unicode"Manifest";
            words[7] = unicode"any";
            words[8] = unicode"form";
            words[9] = unicode"Kinetically";
            words[10] = unicode"and";
            words[11] = unicode"expansively";
            words[12] = unicode"Become";
            words[13] = unicode"a";
            words[14] = unicode"force";
            words[15] = unicode"to";
            words[16] = unicode"be";
            words[17] = unicode"reckoned";
            words[18] = unicode"/";
            words[19] = unicode"§§";
            words[20] = unicode"§§¶";
            words[21] = unicode"¶§¶§";
            words[22] = unicode"─";
            words[23] = unicode"─────▀▀▀";
            words[24] = unicode"▀▀▀───";
            words[25] = unicode"───────▀▀";
            words[26] = unicode"▓▓▓";
            words[27] = unicode"▓▓";
            words[28] = unicode"=▓";
            words[29] = unicode"__";
            words[30] = unicode"__▓";
            words[31] = unicode"=▓";
            words[32] = unicode"▓▓";
            words[33] = unicode"▓▓";
            words[34] = unicode"▀▀▀▀▀";
            words[35] = unicode"──";
            words[36] = unicode"─";
            words[37] = unicode"───▀▀▀▀";
            words[38] = unicode"▀▀▀";
            words[39] = unicode"▀▀▀▀";
            words[40] = unicode"▀▀───▀▀▀";
            words[41] = unicode"▀▀▀▀▀";
            words[42] = unicode"▀▀";
            words[43] = unicode"▀▀▀";
            return (words);
        } else if (element == Element.Earth) {
            string[] memory words = new string[](36);
            words[0] = unicode"Centre";
            words[1] = unicode"of";
            words[2] = unicode"gravity";
            words[3] = unicode"by";
            words[4] = unicode"the";
            words[5] = unicode"universe";
            words[6] = unicode"within";
            words[7] = unicode"Grounded";
            words[8] = unicode"through";
            words[9] = unicode"holistic";
            words[10] = unicode"reflection";
            words[11] = unicode"Rooted";
            words[12] = unicode"by";
            words[13] = unicode"oneness";
            words[14] = unicode"Aligned";
            words[15] = unicode"by";
            words[16] = unicode"strong";
            words[17] = unicode"foundations";
            words[18] = unicode"Unshakable";
            words[19] = unicode"/";
            words[20] = unicode"÷÷";
            words[21] = unicode"Ӝ̵̨̄";
            words[22] = unicode"Ʒ";
            words[23] = unicode"▓▓▓";
            words[24] = unicode"▓▓";
            words[25] = unicode"=▓";
            words[26] = unicode"__";
            words[27] = unicode"__▓";
            words[28] = unicode"=▓";
            words[29] = unicode"▓▓";
            words[30] = unicode"▓▓";
            words[31] = unicode"██";
            words[32] = unicode"▀▀▀▀";
            words[33] = unicode"▀▀▀";
            words[34] = unicode"▀▀▀▀";
            words[35] = unicode"▀▀───▀▀▀";
            return (words);
        } else if (element == Element.Wind) {
            string[] memory words = new string[](48);
            words[0] = unicode"Winds";
            words[1] = unicode"propel";
            words[2] = unicode"high";
            words[3] = unicode"into";
            words[4] = unicode"the";
            words[5] = unicode"unknown";
            words[6] = unicode"Swiftly";
            words[7] = unicode"taken";
            words[8] = unicode"by";
            words[9] = unicode"the";
            words[10] = unicode"wings";
            words[11] = unicode"of";
            words[12] = unicode"time";
            words[13] = unicode"Reminiscing";
            words[14] = unicode"on";
            words[15] = unicode"past";
            words[16] = unicode"journeys";
            words[17] = unicode"Uplift";
            words[18] = unicode"and";
            words[19] = unicode"forward";
            words[20] = unicode"to";
            words[21] = unicode"the";
            words[22] = unicode"undiscovered";
            words[23] = unicode"Freedom";
            words[24] = unicode"to";
            words[25] = unicode"explore";
            words[26] = unicode"/";
            words[27] = unicode"▀▀▀";
            words[28] = unicode"▀▀";
            words[29] = unicode"▀";
            words[30] = unicode"▒▒▒▒";
            words[31] = unicode"▓▒";
            words[32] = unicode"▒";
            words[33] = unicode"▒▀▓";
            words[34] = unicode"▀▓";
            words[35] = unicode"▓▓";
            words[36] = unicode"▓▓";
            words[37] = unicode"▀▀▀▀▀";
            words[38] = unicode"▓▓▓";
            words[39] = unicode"▓▓▓";
            words[40] = unicode"▀▀▀▀";
            words[41] = unicode"▀▀▀";
            words[42] = unicode"▀▀▀▀";
            words[43] = unicode"▒▀▓";
            words[44] = unicode"▒▀▓";
            words[45] = unicode"▒▀▓";
            words[46] = unicode"●";
            words[47] = unicode"▓▒▓▒";
            return (words);
        } else if (element == Element.Wood) {
            string[] memory words = new string[](48);
            words[0] = unicode"Embellished";
            words[1] = unicode"by";
            words[2] = unicode"the";
            words[3] = unicode"elementals";
            words[4] = unicode"Natural";
            words[5] = unicode"invitation";
            words[6] = unicode"and";
            words[7] = unicode"unassuming";
            words[8] = unicode"Nurturing";
            words[9] = unicode"the";
            words[10] = unicode"world";
            words[11] = unicode"with";
            words[12] = unicode"its";
            words[13] = unicode"timeless";
            words[14] = unicode"grace";
            words[15] = unicode"With";
            words[16] = unicode"the";
            words[17] = unicode"warmth";
            words[18] = unicode"at";
            words[19] = unicode"its";
            words[20] = unicode"touch";
            words[21] = unicode"Calming";
            words[22] = unicode"/";
            words[23] = unicode"▓";
            words[24] = unicode"▓▓";
            words[25] = unicode"▓▓";
            words[26] = unicode"██";
            words[27] = unicode"▀▀";
            words[28] = unicode"¶¶";
            words[29] = unicode"▀▀";
            words[30] = unicode"¶¶¶";
            words[31] = unicode"###";
            words[32] = unicode"¶¶";
            words[33] = unicode"¶#";
            words[34] = unicode"¶¶¶¶¶";
            words[35] = unicode"FF";
            words[36] = unicode"1";
            words[37] = unicode"A7";
            words[38] = unicode"2E6";
            words[39] = unicode"¶¶¶¶¶";
            words[40] = unicode"§§";
            words[41] = unicode"▒▒▒▒";
            words[42] = unicode"▓▒";
            words[43] = unicode"▒";
            words[44] = unicode"▒▀▓";
            words[45] = unicode"§§";
            words[46] = unicode"§§¶";
            words[47] = unicode"¶§¶§";
            return (words);
        } else if (element == Element.Metal) {
            string[] memory words = new string[](41);
            words[0] = unicode"Hardening";
            words[1] = unicode"like";
            words[2] = unicode"armour";
            words[3] = unicode"Glimmer";
            words[4] = unicode"in";
            words[5] = unicode"darkness";
            words[6] = unicode"High";
            words[7] = unicode"frequency";
            words[8] = unicode"at";
            words[9] = unicode"peek";
            words[10] = unicode"energy";
            words[11] = unicode"Masterfully";
            words[12] = unicode"calm";
            words[13] = unicode"Confident";
            words[14] = unicode"Impenetrable";
            words[15] = unicode"Fortress";
            words[16] = unicode"/";
            words[17] = unicode"¨÷ö¨";
            words[18] = unicode"©©©";
            words[19] = unicode"®®";
            words[20] = unicode"###";
            words[21] = unicode"œ";
            words[22] = unicode"¶#";
            words[23] = unicode"šššš";
            words[24] = unicode"▓▓";
            words[25] = unicode"▓▓";
            words[26] = unicode"██";
            words[27] = unicode"¶¶¶¶¶";
            words[28] = unicode"§§";
            words[29] = unicode"€€€";
            words[30] = unicode"¾";
            words[31] = unicode"Ø";
            words[32] = unicode"▒▀▓";
            words[33] = unicode"§§";
            words[34] = unicode"§§¶";
            words[35] = unicode"¶§¶§";
            words[36] = unicode"ö";
            words[37] = unicode"ööö";
            words[38] = unicode"▓▓";
            words[39] = unicode"▓▓";
            words[40] = unicode"██";
            return (words);
        } else if (element == Element.Hologram) {
            string[] memory words = new string[](61);
            words[0] = unicode"Visions";
            words[1] = unicode"foretold";
            words[2] = unicode"yet";
            words[3] = unicode"What";
            words[4] = unicode"appears";
            words[5] = unicode"may";
            words[6] = unicode"not";
            words[7] = unicode"be";
            words[8] = unicode"what";
            words[9] = unicode"seems";
            words[10] = unicode"Rather";
            words[11] = unicode"Let";
            words[12] = unicode"go";
            words[13] = unicode"constraints";
            words[14] = unicode"Let";
            words[15] = unicode"go";
            words[16] = unicode"all";
            words[17] = unicode"bias";
            words[18] = unicode"notions";
            words[19] = unicode"Embellish";
            words[20] = unicode"by";
            words[21] = unicode"spectrum";
            words[22] = unicode"fluctuations";
            words[23] = unicode"Of";
            words[24] = unicode"the";
            words[25] = unicode"Virtual";
            words[26] = unicode"and";
            words[27] = unicode"the";
            words[28] = unicode"Physical";
            words[29] = unicode"Between";
            words[30] = unicode"realities";
            words[31] = unicode"Liberty";
            words[32] = unicode"/";
            words[33] = unicode"ΞΞΞ";
            words[34] = unicode"ŸŸŸ";
            words[35] = unicode"∂";
            words[36] = unicode"▓▓";
            words[37] = unicode"▓▓";
            words[38] = unicode"██";
            words[39] = unicode"▓▓";
            words[40] = unicode"▓▓";
            words[41] = unicode"██";
            words[42] = unicode"œ";
            words[43] = unicode"∃";
            words[44] = unicode"∏∏";
            words[45] = unicode"FF";
            words[46] = unicode"√√√√";
            words[47] = unicode"▓▒▓▒";
            words[48] = unicode"A7";
            words[49] = unicode"2E6";
            words[50] = unicode"≡≡";
            words[51] = unicode"§§";
            words[52] = unicode"€€€";
            words[53] = unicode"¾";
            words[54] = unicode"Ø";
            words[55] = unicode"▒▀▓";
            words[56] = unicode"♥♥♥♥";
            words[57] = unicode"♠♠♠";
            words[58] = unicode"♣";
            words[59] = unicode"♦";
            words[60] = unicode"ööö";
            return (words);
        } else revert IndexOutOfRange();
    }
}
